// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package routeguide

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncrementServiceClient is the client API for IncrementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncrementServiceClient interface {
	AliveCheck(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Timestamp, error)
	Increment(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Value, error)
}

type incrementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncrementServiceClient(cc grpc.ClientConnInterface) IncrementServiceClient {
	return &incrementServiceClient{cc}
}

func (c *incrementServiceClient) AliveCheck(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Timestamp, error) {
	out := new(Timestamp)
	err := c.cc.Invoke(ctx, "/routeguide.IncrementService/AliveCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementServiceClient) Increment(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/routeguide.IncrementService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncrementServiceServer is the server API for IncrementService service.
// All implementations must embed UnimplementedIncrementServiceServer
// for forward compatibility
type IncrementServiceServer interface {
	AliveCheck(context.Context, *Timestamp) (*Timestamp, error)
	Increment(context.Context, *Timestamp) (*Value, error)
	mustEmbedUnimplementedIncrementServiceServer()
}

// UnimplementedIncrementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncrementServiceServer struct {
}

func (UnimplementedIncrementServiceServer) AliveCheck(context.Context, *Timestamp) (*Timestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliveCheck not implemented")
}
func (UnimplementedIncrementServiceServer) Increment(context.Context, *Timestamp) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedIncrementServiceServer) mustEmbedUnimplementedIncrementServiceServer() {}

// UnsafeIncrementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncrementServiceServer will
// result in compilation errors.
type UnsafeIncrementServiceServer interface {
	mustEmbedUnimplementedIncrementServiceServer()
}

func RegisterIncrementServiceServer(s grpc.ServiceRegistrar, srv IncrementServiceServer) {
	s.RegisterService(&IncrementService_ServiceDesc, srv)
}

func _IncrementService_AliveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementServiceServer).AliveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguide.IncrementService/AliveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementServiceServer).AliveCheck(ctx, req.(*Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguide.IncrementService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementServiceServer).Increment(ctx, req.(*Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

// IncrementService_ServiceDesc is the grpc.ServiceDesc for IncrementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncrementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routeguide.IncrementService",
	HandlerType: (*IncrementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AliveCheck",
			Handler:    _IncrementService_AliveCheck_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _IncrementService_Increment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routeguide/route.proto",
}
